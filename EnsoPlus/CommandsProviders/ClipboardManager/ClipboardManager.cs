using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;

using Extension;
using EnsoPlus;
using EnsoPlus.Entities;
using Common;
using System.Windows.Forms;
using System.Threading;
using System.IO;

namespace EnsoPlus.CommandsProviders.ClipboardManager
{
    class ClipboardManager : ICommandsProvider
    {
        #region ICommandsProvider Members

        public List<Command> GetCommands()
        {
            List<Command> commands = new List<Command>();

            commands.Add(new Command("copy full path", "[file or folder]", "Copies full path of selected folder or file to clipboard", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/true,/*Can use file selection as parameter:*/true,
                new ParameterInputArguments(/*Caption:*/"memorized item or shortcut", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"", /*Accept only suggested:*/false,/*Case sensitive:*/false),
                /*Suggestions sources:*/
                typeof(WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.BookmarkBrowser.BookmarkBrowser)
                ));

            commands.Add(new Command("put on clipboard", "[work item]", "Copies work item to clipboard", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/false,/*Can use file selection as parameter:*/false,
                new ParameterInputArguments(/*Caption:*/"work item", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"", /*Accept only suggested:*/true,/*Case sensitive:*/false),
                /*Suggestions sources:*/
                typeof(WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.Contacts.Contacts),
                typeof(WorkItemsProviders.ShortcutTemplates.ShortcutTemplates),
                typeof(WorkItemsProviders.BookmarkBrowser.BookmarkBrowser),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)
                ));

            commands.Add(new Command("save-clipboard-as", "[work item name]", "Depending on type of clipboard contents saves it as Shortcut, Memorized string or Image file.", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/false,/*Can use file selection as parameter:*/false,
                new ParameterInputArguments(/*Caption:*/"save clipboard as", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"temp", /*Accept only suggested:*/false,/*Case sensitive:*/false),
                /*Suggestions sources:*/
                typeof(WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)

                ));

            commands.Add(new Command("save-clipboard-as", "[work item name] and copy its file path", "Depending on type of clipboard contents saves it as Shortcut, Memorized string or Image file.", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/false,/*Can use file selection as parameter:*/false,
                new ParameterInputArguments(/*Caption:*/"save clipboard as", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"temp", /*Accept only suggested:*/false,/*Case sensitive:*/false),
                            /*Suggestions sources:*/
                typeof(WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)
                ));

            //commands.Add(new Command("save clipboard to", "[folder]", "Copies work item to clipboard", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/false,/*Can use file selection as parameter:*/false,
            //    new ParameterInputArguments(/*Caption:*/"work item", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"", /*Accept only suggested:*/true,/*Case sensitive:*/false),
            //                /*Suggestions sources:*/
            //    typeof(WorkItemsProviders.MemorizedData.MemorizedData),
            //    typeof(WorkItemsProviders.Shortcuts.Shortcuts),
            //    typeof(WorkItemsProviders.Contacts.Contacts),
            //    typeof(WorkItemsProviders.ShortcutTemplates.ShortcutTemplates)
            //    ));

            //commands.Add(new Command("copy full path", "[file or folder]", "Copies full path of selected folder or file to clipboard", null, EnsoPostfixType.Arbitrary, this, /*Can use selection as parameter:*/true,
            //    new ParameterInputArguments(/*Caption:*/"ProviderSample", null, /*Offer all suggestions:*/false, /*Read only:*/false, /*predefined value:*/"", /*Accept only suggested:*/false,/*Case sensitive:*/false),
            //    /*Suggestions sources:*/
            //    typeof(ParameterTypeProviders.MemorizedData.MemorizedData),
            //    typeof(ParameterTypeProviders.Shortcuts.Shortcuts),
            //    typeof(ParameterTypeProviders.Contacts.Contacts),
            //    typeof(ParameterTypeProviders.ShortcutTemplates.ShortcutTemplates)
            //    ));

            //commands.Add(new Command("commandWithNoPostfix", " ", "This is description", null, EnsoPostfixType.None, this, /*Can use selection as parameter:*/false,
            //    new ParameterInputArguments()
            //    ));

            return commands;
        }

        public void ProcessingBeforeParameterInput(Command command, ref bool cancel)
        {
            if ((command.Name == "save-clipboard-as" && command.Postfix == "[work item name]") ||
                   (command.Name == "save-clipboard-as" && command.Postfix == "[work item name] and copy its file path"))
            {
				string clipboardContentsFormat = CraftSynth.BuildingBlocks.IO.Clipboard.GetClipboardFormatName();
                if (clipboardContentsFormat == DataFormats.Bitmap)
                {
					Image clipboardImage = CraftSynth.BuildingBlocks.IO.Clipboard.GetImageFromClipboard();
                    WorkItemsProviders.Clipboard.FormImagePreview.Execute(clipboardImage);
                }
            }
        }

        public void ExecuteCommand(Extension.IEnsoService service, Command command)
        {
            Logging.AddActionLog(string.Format("ClipboardManager: Executing command '{0}' ...", command.Name));

            if (command.Name == "copy full path" || command.Name == "put on clipboard")
            {
				CraftSynth.BuildingBlocks.IO.Clipboard.SetTextToClipboard(command.parametersOnExecute[0].GetValueAsText());
                Logging.AddActionLog(string.Format("ClipboardManager: full path copied to clipboard: {0}",command.parametersOnExecute[0].GetValueAsText()));
                MessagesHandler.Display( string.Format("Copied to clipboard: {0}", command.parametersOnExecute[0].GetValueAsText()));
	            EnsoPlus.NotifyOtherApplicationsAboutClipboardChange();
            }
            else
                if ((command.Name == "save-clipboard-as" && command.Postfix == "[work item name]") ||
                    (command.Name == "save-clipboard-as" && command.Postfix == "[work item name] and copy its file path"))
                {
					string clipboardContentsFormat = CraftSynth.BuildingBlocks.IO.Clipboard.GetClipboardFormatName();
                    if (clipboardContentsFormat == DataFormats.Bitmap)
                    {
						Image clipboardImage = CraftSynth.BuildingBlocks.IO.Clipboard.GetImageFromClipboard();                        
                        string imageFilePath = command.parametersOnExecute[0].GetValueAsText();
                        try
                        {
                            if (!Directory.Exists(Settings.Current.ImagesFolder)) Directory.CreateDirectory(Settings.Current.ImagesFolder);
                            imageFilePath = Path.Combine(Settings.Current.ImagesFolder, command.parametersOnExecute[0].GetValueAsText() + ".png");                            
                            clipboardImage.Save(imageFilePath, System.Drawing.Imaging.ImageFormat.Png);
                            Logging.AddActionLog(string.Format("ClipboardManager: clipboard image saved to: {0}", imageFilePath));
                            MessagesHandler.Display( "Saved.");

                            if (command.Postfix.CompareTo("[work item name] and copy its file path")==0)
                            {
								CraftSynth.BuildingBlocks.IO.Clipboard.SetTextToClipboard(imageFilePath);
                                Logging.AddActionLog(string.Format("ClipboardManager: file path '{0}' copied to clipboard.", imageFilePath));
                                MessagesHandler.Display( "Image saved and its file path copied.");
								EnsoPlus.NotifyOtherApplicationsAboutClipboardChange();
                            }
                        }
                        catch (Exception exception)
                        {
                            throw new ApplicationException(string.Format("Clipboard manager: Failed to save clipboard image to '{0}'.", imageFilePath), exception);                          
                        }
                    }
                    else
                    {
                        MessagesHandler.Display( "Clipboard contents unrecognized. Only bitmap supported so far.");
                    
                    }

                    

                }
                //else
                //    if (command.Name == "command name" && command.Postfix == "postfix [item] [item2]")
                //    {
                //        MessagesHandler.Display( string.Format("Executing {0} ...", command.Name));

                //    }
                    else
                    {
                        throw new ApplicationException(string.Format("ClipboardManager: Command not found. Command: {0} {1}", command.Name, command.Postfix));
                    }
        }

        #endregion

     
    }
}
