using System;
using System.Collections.Generic;
using System.Text;

using EnsoPlus;
using EnsoPlus.Entities;
using Extension;
using System.IO;
using Common;

namespace EnsoPlus.CommandsProviders.Opener
{
    class Opener : ICommandsProvider
    {
        #region ICommandsProvider Members

        public List<Command> GetCommands()
        {
            List<Command> commands = new List<Command>();

            commands.Add(new Command("open", "[item]", "Opens item in default application", null, EnsoPostfixType.Arbitrary, this, true, true,
                new ParameterInputArguments("open", null, true, false, "", true, false),
                 typeof( WorkItemsProviders.MemorizedData.MemorizedData),
                //typeof(WorkItemsProviders.Contacts.Contacts),
                //typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.Shortcuts.FilesWorkItems),
                typeof(WorkItemsProviders.Shortcuts.StartMenuShortcuts),
                //typeof(WorkItemsProviders.CallerHistory.CallerHistory),
                typeof(WorkItemsProviders.ReflectionData.ReflectionData),
                typeof(WorkItemsProviders.Clipboard.ClipboardText),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)
				));

			commands.Add(new Command("learn as open", "[name] [selection]", "Memorizes URL or file to use it with 'open' command later", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/true,/*Can use file selection as parameter:*/true,
			   new ParameterInputArguments("what", null, false, false, string.Empty, false, false)
			   //typeof(WorkItemsProviders.CallerHistory.CallerHistory), 
			   //typeof(WorkItemsProviders.Contacts.Contacts)
			   )); 
                

            return commands;
        }

        public void ExecuteCommand(Extension.IEnsoService service, Command command)
        {
            Logging.AddActionLog(string.Format("Opener: Executing command '{0}' ...", command.Name));

            if (command.Name == "open")
            {
				//if (command.parametersOnExecute[0] is Entities.WorkItems.Shortcuts)
				//{
				//	Entities.WorkItems.Shortcuts shortcuts = command.parametersOnExecute[0] as Entities.WorkItems.Shortcuts;

				//	Logging.AddActionLog(string.Format("Opener: Opening '{0}' in Chrome ...", shortcuts.shortcutsFilePath));
				//	MessagesHandler.Display( string.Format("Opening {0} ...", shortcuts.caption));

				//	foreach (Shortcut shortcut in shortcuts.shortcuts)
				//	{
				//		Logging.AddActionLog(string.Format("COpener: Opening '{0}' in Chrome ...", shortcut.targetPath));

				//		OpenInChrome(shortcut.targetPath, command.Name.Contains("tab"), command.Name.Contains("incognito"));
				//	}
				//}
				//else
				//{
                    Logging.AddActionLog(string.Format("Opener: Opening '{0}' ...", command.parametersOnExecute[0].GetValueAsText()));

					string message = command.parametersOnExecute[0].GetValueAsText();
					if (File.Exists(message))
					{
						message = Path.GetFileNameWithoutExtension(message);
					}
					else if(Directory.Exists(message))
					{
						message = Path.GetFileNameWithoutExtension(message);
					}

                    MessagesHandler.Display( string.Format("Opening {0} ...", message));

                    Open(command.parametersOnExecute[0].GetValueAsText());
                //}
            }
            else if(command.Name=="learn as open")
            {
	            Logging.AddActionLog(string.Format("Opener: learn as open '{0}' ...", command.parametersOnExecute[0].GetValueAsText()));
	            string content = "[InternetShortcut]\r\nURL=" + command.parametersOnExecute[1].GetValueAsText();
				string shortcutsFolder = Settings.Current.EnsoLearnAsOpenCommandsFolder;
				CraftSynth.BuildingBlocks.IO.FileSystem.CreateFolderIfItDoesNotExist(shortcutsFolder);
	            string filePath = Path.Combine(shortcutsFolder, command.parametersOnExecute[0].GetValueAsText()+".url");
				File.WriteAllText(filePath, content);
				SuggestionsCache.DropCache(typeof(WorkItemsProviders.Shortcuts.FilesWorkItems));
	            MessagesHandler.Display("Learned 'open "+ command.parametersOnExecute[0].GetValueAsText()+"'");
            }


        }

       

        public static void Open(string filePath)
        {
           CraftSynth.BuildingBlocks.WindowsNT.Misc.OpenFile(filePath);
        }

        #endregion


		void ICommandsProvider.ProcessingBeforeParameterInput(Command command, ref bool cancel)
		{
		}

	}
}
