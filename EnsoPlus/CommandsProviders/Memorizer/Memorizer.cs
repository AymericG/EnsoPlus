using System;
using System.Collections.Generic;
using System.Text;

using Common;
using Extension;
using EnsoPlus;
using EnsoPlus.Entities;
using System.IO;

namespace EnsoPlus.CommandsProviders.Memorizer
{
    class Memorizer:ICommandsProvider
    {

        #region ICommandsProvider Members

        public List<Command> GetCommands()
        {
            List<Command> commands = new List<Command>();


            //commands.Add(new Command("memorize as", "[what to memorize] as [item name]", "Saves selected or specified text for later use", null, EnsoPostfixType.Arbitrary, this,
            //    new ParameterInputArguments("as", null, false, false, "", false, false),
            //    typeof(ParameterTypeProviders.MemorizedData.MemorizedData)));

            commands.Add(new Command("memorize", "[what to memorize] as [item name]", "Saves specified or selected text or folder/file path later use", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/true,/*Can use file selection as parameter:*/true,
                new ParameterInputArguments("memorize", null, false, false, "", false, false )) );

            commands.Add(new Command("memorize-as", "[item name] [what to memorize]", "Saves specified or selected text or folder/file path later use", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/true,/*Can use file selection as parameter:*/true,
                new ParameterInputArguments("what", null, false, false, "", false, false)) );

            commands.Add(new Command("display", "[item name]", "Shows item on screen", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/true,/*Can use file selection as parameter:*/false,
                new ParameterInputArguments("display", null, false, false, string.Empty, true, false),
                typeof( WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Contacts.Contacts),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.CallerHistory.CallerHistory),
                typeof(WorkItemsProviders.ReflectionData.ReflectionData),
                typeof(WorkItemsProviders.BookmarkBrowser.BookmarkBrowser),
                typeof(WorkItemsProviders.Clipboard.ClipboardText),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)));

            commands.Add(new Command("drop", "[item name]", "Paste item at cursor", null, EnsoPostfixType.Arbitrary, this, /*Can use text selection as parameter:*/false,/*Can use file selection as parameter:*/false,
                new ParameterInputArguments("drop", null, false, false, "", true, false),
                typeof(WorkItemsProviders.MemorizedData.MemorizedData),
                typeof(WorkItemsProviders.Contacts.Contacts),
                typeof(WorkItemsProviders.Shortcuts.Shortcuts),
                typeof(WorkItemsProviders.ReflectionData.ReflectionData),
                typeof(WorkItemsProviders.BookmarkBrowser.BookmarkBrowser),
                typeof(WorkItemsProviders.Clipboard.ClipboardText),
                typeof(WorkItemsProviders.Misc.AutoGeneratedText)));
            
            return commands;

        }

        public void ExecuteCommand(IEnsoService service, Command command)
        {
            Logging.AddActionLog(string.Format("Memorizer: Executing command '{0}' ...", command.Name));

            if (command.Name == "memorize" && command.Postfix == "[what to memorize] as [item name]")
            {
                if (!Directory.Exists(Settings.Current.MemorizerDataFolder))
                {
                    Directory.CreateDirectory(Settings.Current.MemorizerDataFolder);
                    Logging.AddActionLog(string.Format("Memorizer: Folder '{0}' created.", Settings.Current.MemorizerDataFolder));
                }
                string filePath = Path.Combine(Settings.Current.MemorizerDataFolder, command.parametersOnExecute[1].GetValueAsText() + ".txt");
                File.WriteAllText(filePath, command.parametersOnExecute[0].GetValueAsText());
                SuggestionsCache.DropCache(typeof(WorkItemsProviders.MemorizedData.MemorizedData));
                string message = string.Format("{0} memorized", command.parametersOnExecute[1].GetValueAsText());
                Logging.AddActionLog(string.Format("Memorizer: {0}",message));
                MessagesHandler.Display( message);
            }else
                if (command.Name == "memorize-as" && command.Postfix == "[item name] [what to memorize]")
                {
                    if (!Directory.Exists(Settings.Current.MemorizerDataFolder))
                    {
                        Directory.CreateDirectory(Settings.Current.MemorizerDataFolder);
                        Logging.AddActionLog(string.Format("Memorizer: Folder '{0}' created.", Settings.Current.MemorizerDataFolder));
                    }
                    string filePath = Path.Combine(Settings.Current.MemorizerDataFolder, command.parametersOnExecute[0].GetValueAsText() + ".txt");
                    File.WriteAllText(filePath, command.parametersOnExecute[1].GetValueAsText());
                    SuggestionsCache.DropCache(typeof(WorkItemsProviders.MemorizedData.MemorizedData));
                    string message = string.Format("{0} memorized", command.parametersOnExecute[0].GetValueAsText());
                    Logging.AddActionLog(string.Format("Memorizer: {0}", message));
                    MessagesHandler.Display( message);
                }
                else
                    if (command.Name == "display" && command.Postfix == "[item name]")
                    {
                        MessagesHandler.Display( command.parametersOnExecute[0].GetValueAsText());
                        Logging.AddActionLog(string.Format("Memorizer: {0} displayed.", command.parametersOnExecute[0].GetValueAsText()));
                    }
                    else
                        if (command.Name == "drop" && command.Postfix == "[item name]")
                        {
                            HandlerForSelection.Put(command.parametersOnExecute[0].GetValueAsText());
                            Logging.AddActionLog(string.Format("Memorizer: {0} dropped.", command.parametersOnExecute[0].GetValueAsText()));
                        }
                        else
                            {
                                throw new ApplicationException(string.Format("Memorizer: Command not found. Command: {0} {1}", command.Name, command.Postfix)); 
                            }

        }

        public void ProcessingBeforeParameterInput(Command command, ref bool cancel)
        {
        }

        #endregion
    }
}
