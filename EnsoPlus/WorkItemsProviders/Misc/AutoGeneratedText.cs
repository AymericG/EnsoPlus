using System;
using System.Collections.Generic;
using System.Text;
using System.IO;

using Common;
using EnsoPlus.Entities;

namespace EnsoPlus.WorkItemsProviders.Misc
{
    class AutoGeneratedText : IWorkItemsProvider
    {
        #region IParameterTypeProvider Members

        public bool SuggestionsCachingAllowed()
        {
            return false;
        }

        public Dictionary<string, IWorkItem> GetSuggestions()
        {
            Dictionary<string, IWorkItem> suggestions = new Dictionary<string, IWorkItem>();

            StringWorkItem currentDateInSortableFormat = new StringWorkItem("[Current date in sortable format]");
            currentDateInSortableFormat.provider = this;
            suggestions.Add("[Current date in sortable format]", currentDateInSortableFormat);

            StringWorkItem currentDateAndTimeInSortableFormat = new StringWorkItem("[Current date and time in sortable format]");
            currentDateAndTimeInSortableFormat.provider = this;
            suggestions.Add("[Current date and time in sortable format]", currentDateAndTimeInSortableFormat);

            StringWorkItem currentDateInSortableFormatForFileSystem = new StringWorkItem("[Current date in sortable format for file system]");
            currentDateInSortableFormatForFileSystem.provider = this;
            suggestions.Add("[Current date in sortable format for file system]", currentDateInSortableFormatForFileSystem);

            StringWorkItem currentDateAndTimeInSortableFormatForFileSystem = new StringWorkItem("[Current date and time in sortable format for file system]");
            currentDateAndTimeInSortableFormatForFileSystem.provider = this;
            suggestions.Add("[Current date and time in sortable format for file system]", currentDateAndTimeInSortableFormatForFileSystem);


            StringWorkItem guid = new StringWorkItem("[Guid]");
            guid.provider = this;
            suggestions.Add("[Guid]", guid);


            return suggestions;
        }

        public IWorkItem GetParameterFromSelectedSuggestion(IWorkItem selectedSuggestion)
        {
            if (selectedSuggestion is StringWorkItem)
            {
                StringWorkItem selectedStringWorkItem = (StringWorkItem)selectedSuggestion;
                if (selectedStringWorkItem.GetValueAsText() == "[Current date and time in sortable format]")
                {
					selectedSuggestion = new StringWorkItem(CraftSynth.BuildingBlocks.Common.DateAndTime.GetCurrentDateAndTimeInSortableFormat()); ;
                }
                else if(selectedStringWorkItem.GetValueAsText() == "[Current date and time in sortable format for file system]")
                {
                    selectedSuggestion = new StringWorkItem(CraftSynth.BuildingBlocks.Common.DateAndTime.GetCurrentDateAndTimeInSortableFormatForFileSystem()); ;
                }else
                    if (selectedStringWorkItem.GetValueAsText() == "[Current date in sortable format]")
                    {
                        selectedSuggestion = new StringWorkItem(CraftSynth.BuildingBlocks.Common.DateAndTime.GetCurrentDateInSortableFormat()); ;
                    }
                    else if (selectedStringWorkItem.GetValueAsText() == "[Current date in sortable format for file system]")
                    {
						selectedSuggestion = new StringWorkItem(CraftSynth.BuildingBlocks.Common.DateAndTime.GetCurrentDateInSortableFormatForFileSystem()); ;
                    }
                else if (selectedStringWorkItem.GetValueAsText() == "[Guid]")
                {
                    selectedSuggestion = new StringWorkItem(Guid.NewGuid().ToString()); 
                }
            }

            return selectedSuggestion;
        }

        public void Remove(IWorkItem workItemToRemove)
        {
            throw new ApplicationException("Operation not supported.");
        }

        #endregion
    }
}
